type: edu
custom_name: stage5
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |+
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println("Input command: ");
                try {
                    String[] input = scanner.nextLine().split(" ");
                    if (input[0].equals("start")){
                        if (input.length < 2) {
                            System.out.println("Bad parameters!");
                        }
                        else {
                            String player1Input = input[1];
                            String player2Input = input[2];
                            // input validation
                            if ((player1Input.equals("user") || player1Input.equals("easy")
                                    || player1Input.equals("medium") || player1Input.equals("hard"))
                             && (player2Input.equals("user") || player2Input.equals("easy")
                                    || player2Input.equals("medium") || player2Input.equals("hard"))) {
                                // creating object of player1
                                Player player1 = Player.createPlayer(Symbol.X, player1Input);
                                // creating object of player2
                                Player player2 = Player.createPlayer(Symbol.O, player2Input);
                                // ---------------------- RUN GAME ----------------------
                                runGame(player1, player2);
                                // ----------------------          ----------------------
                            }
                            else {
                                System.out.println("Bad parameters!");
                            }
                        }
                    }
                    // only "exit" command can finish the game
                    else if (input[0].equals("exit")) {
                        break;
                    }
                    else {
                        System.out.println("Bad parameters!");
                    }

                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Bad parameters!");
                }
            }
        }

        private static void runGame (Player p1, Player p2) {
            GameMatrix matrix = new GameMatrix();
            matrix.printMatrix(); // init empty board | later main menu
            while (true) {
                p1.move(matrix);
                matrix.printMatrix();
                if (matrix.isWinner()) {
                    break;
                }
                p2.move(matrix);
                matrix.printMatrix();
                if (matrix.isWinner()) {
                    break;
                }
            }
        }
    }

  learner_created: true
- name: src/tictactoe/Symbol.java
  visible: true
  text: |
    package tictactoe;

    public enum Symbol {
        X("X"),
        O("O"),
        EMPTY(" ");

        private final String symbol;

        Symbol(String symbol) {
            this.symbol = symbol;
        }

        public String getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    public class Player {

        protected void move(GameMatrix matrix) {

        }

        public static Player createPlayer (Symbol symbol, String request){
            switch (request) {
                case "user": {
                    return new User(symbol);
                }
                case "easy": {
                    return  new AIEasy(symbol);
                }
                case "medium": {
                    return  new AIMedium(symbol);
                }
                case "hard": {
                    return  new AIHard(symbol);
                }
                default: {
                    return  new Player();
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/AIMedium.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class AIMedium extends Player {
        Symbol symbol;

        public AIMedium (Symbol symbol) {
            this.symbol = symbol;
        }

        public void move(GameMatrix matrix) {
            System.out.println("Making move level \"medium\"");
            Random random = new Random();
            int xCoordinate;
            int yCoordinate;

            // declaration of an array of results to interpret
            int[] checkingResult = matrix.checkTwoInRow(symbol);
            // check if you can win
            if(checkingResult[0] == 1) {
                matrix.gameMatrix[checkingResult[1]][checkingResult[2]] = symbol;
            } else {
                // check if opponent can win
                if (this.symbol == Symbol.O) {
                    checkingResult = matrix.checkTwoInRow(Symbol.X);
                } else {
                    checkingResult = matrix.checkTwoInRow(Symbol.O);
                }
                if(checkingResult[0] == 1) {
                    matrix.gameMatrix[checkingResult[1]][checkingResult[2]] = symbol;
                } else {
                    // make a random move
                    while (true) {
                        xCoordinate = random.nextInt(3 - 1 + 1) + 1; // Coordinates range <1-3>
                        yCoordinate = random.nextInt(3 - 1 + 1) + 1;
                        if (matrix.isFieldOfMatrixFree(xCoordinate, yCoordinate)) {
                            matrix.setFieldOfMatrix(xCoordinate, yCoordinate, symbol);
                            break; // break while loop
                        }
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/User.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class User extends Player {
        Symbol symbol;

        public User (Symbol symbol) {
            this.symbol = symbol;
        }

        @Override
        public void move(GameMatrix matrix) {
            Scanner scanner = new Scanner(System.in);
            int xCoordinate;
            int yCoordinate;

            while (true) {
                //read coordinates
                System.out.print("Enter the coordinates: ");
                String input = scanner.nextLine().replaceAll(" ","");  // replaceAll to cut all spaces
                // input String should have only 2 numbers (Integers); first(1-3), second(1-3)
                if (input.length() == 2) {
                    try {
                        xCoordinate = Integer.parseInt(input.substring(0, 1)); // first sign from input to xCoordinate
                        yCoordinate = Integer.parseInt(input.substring(1, 2)); // second sign from input to yCoordinate
                        // check if coordinates are not 0. Should be range <1-3>.
                        if (xCoordinate >= 1 && xCoordinate <= 3 && yCoordinate >= 1 && yCoordinate <= 3 ) {
                            // if cell is empty
                            if (matrix.isFieldOfMatrixFree(xCoordinate, yCoordinate)) {
                                matrix.setFieldOfMatrix(xCoordinate, yCoordinate, symbol);
                                break; // break while loop
                            } else {
                                System.out.println("This cell is occupied! Choose another one!");
                            }
                        } else {
                            System.out.println("Coordinates should be from 1 to 3!");
                        }
                    } catch (NumberFormatException nfe) {
                        System.out.println("You should enter numbers!");
                    }
                } else {
                    System.out.println("Wrong input! Try again!");
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/AIEasy.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class AIEasy extends Player{
        Symbol symbol;

        public AIEasy (Symbol symbol) {
            this.symbol = symbol;
        }


        public void move(GameMatrix matrix) {
            System.out.println("Making move level \"easy\"");
            Random random = new Random();
            int xCoordinate;
            int yCoordinate;

            while (true) {
                xCoordinate = random.nextInt(3 - 1 + 1) + 1; // Coordinates range <1-3>
                yCoordinate = random.nextInt(3 - 1 + 1) + 1;
                if (matrix.isFieldOfMatrixFree(xCoordinate, yCoordinate)) {
                    matrix.setFieldOfMatrix(xCoordinate, yCoordinate, symbol);
                    break; // break while loop
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/GameMatrix.java
  visible: true
  text: |
    package tictactoe;

    public class GameMatrix {
        public final Symbol[][] gameMatrix;

        public GameMatrix() {
            gameMatrix = new Symbol[][]{
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY},
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY},
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY}
            };
        }

        public boolean isFieldOfMatrixFree(int x, int y) {
            int column = x - 1;
            int row = 3 - y;

            return gameMatrix[row][column] == Symbol.EMPTY;
        }

        public void setFieldOfMatrix(int x, int y, Symbol symbol) {
            int column = x - 1;
            int row = 3 - y;

            gameMatrix[row][column] = symbol;
        }

        public boolean isWinner() {
            //Check if there are some 'O' or 'X' in line: 00 01 02 | 10 11 12 | 20 21 22 | 00 10 20 | 01 11 21 | 02 12 22
            // or to the cross: 00 11 22 | 02 11 20.
            if (       gameMatrix[0][0] == Symbol.X && gameMatrix[0][1] == Symbol.X && gameMatrix[0][2] == Symbol.X
                    || gameMatrix[1][0] == Symbol.X && gameMatrix[1][1] == Symbol.X && gameMatrix[1][2] == Symbol.X
                    || gameMatrix[2][0] == Symbol.X && gameMatrix[2][1] == Symbol.X && gameMatrix[2][2] == Symbol.X
                    || gameMatrix[0][0] == Symbol.X && gameMatrix[1][0] == Symbol.X && gameMatrix[2][0] == Symbol.X
                    || gameMatrix[0][1] == Symbol.X && gameMatrix[1][1] == Symbol.X && gameMatrix[2][1] == Symbol.X
                    || gameMatrix[0][2] == Symbol.X && gameMatrix[1][2] == Symbol.X && gameMatrix[2][2] == Symbol.X
                    || gameMatrix[0][0] == Symbol.X && gameMatrix[1][1] == Symbol.X && gameMatrix[2][2] == Symbol.X
                    || gameMatrix[0][2] == Symbol.X && gameMatrix[1][1] == Symbol.X && gameMatrix[2][0] == Symbol.X) {
                System.out.println("X wins");
                return true;
            } else if (gameMatrix[0][0] == Symbol.O && gameMatrix[0][1] == Symbol.O && gameMatrix[0][2] == Symbol.O
                    || gameMatrix[1][0] == Symbol.O && gameMatrix[1][1] == Symbol.O && gameMatrix[1][2] == Symbol.O
                    || gameMatrix[2][0] == Symbol.O && gameMatrix[2][1] == Symbol.O && gameMatrix[2][2] == Symbol.O
                    || gameMatrix[0][0] == Symbol.O && gameMatrix[1][0] == Symbol.O && gameMatrix[2][0] == Symbol.O
                    || gameMatrix[0][1] == Symbol.O && gameMatrix[1][1] == Symbol.O && gameMatrix[2][1] == Symbol.O
                    || gameMatrix[0][2] == Symbol.O && gameMatrix[1][2] == Symbol.O && gameMatrix[2][2] == Symbol.O
                    || gameMatrix[0][0] == Symbol.O && gameMatrix[1][1] == Symbol.O && gameMatrix[2][2] == Symbol.O
                    || gameMatrix[0][2] == Symbol.O && gameMatrix[1][1] == Symbol.O && gameMatrix[2][0] == Symbol.O) {
                System.out.println("O wins");
                return true;
            } else if (gameMatrix[0][0] != Symbol.EMPTY && gameMatrix[0][1] != Symbol.EMPTY && gameMatrix[0][2] != Symbol.EMPTY
                    && gameMatrix[1][0] != Symbol.EMPTY && gameMatrix[1][1] != Symbol.EMPTY && gameMatrix[1][2] != Symbol.EMPTY
                    && gameMatrix[2][0] != Symbol.EMPTY && gameMatrix[2][1] != Symbol.EMPTY && gameMatrix[2][2] != Symbol.EMPTY) {
                System.out.println("Draw");
                return true;
            }
            return false;
        }


        public int[] checkTwoInRow(Symbol symbol) {
            int xCoordinate;
            int yCoordinate;
            int[] result = new int[3];
            /*
            result [0] = two in row -> 1; not -> 0
            result [1] = xCoordinate
            result [2] = yCoordinate
             */

            // check rows
            for (int i = 0; i < gameMatrix.length; i++) {
                int symbolCounter = 0;
                for (int j = 0; j < gameMatrix.length; j++) {
                    if (gameMatrix[i][j] == symbol) {
                        symbolCounter++;
                        if (symbolCounter == 2) {
                            xCoordinate = i;
                            for (int k = 0; k < gameMatrix.length; k++) {
                                if (gameMatrix[xCoordinate][k] == Symbol.EMPTY) {
                                    yCoordinate = k;
                                    result[0] = 1;
                                    result[1] = xCoordinate;
                                    result[2] = yCoordinate;
                                    return result;
                                }
                            }
                        }
                    }
                }
            }
            // check columns
            for (int i = 0; i < gameMatrix.length; i++) {
                int symbolCounter = 0;
                for (int j = 0; j < gameMatrix.length; j++) {
                    if (gameMatrix[j][i] == symbol) {
                        symbolCounter++;
                        if (symbolCounter == 2) {
                            yCoordinate = i;
                            for (int k = 0; k < gameMatrix.length; k++) {
                                if (gameMatrix[k][yCoordinate] == Symbol.EMPTY) {
                                    xCoordinate = k;
                                    result[0] = 1;
                                    result[1] = xCoordinate;
                                    result[2] = yCoordinate;
                                    return result;
                                }
                            }
                        }
                    }
                }
            }
            // check diagonals
            if (       gameMatrix[0][0] == symbol && gameMatrix[1][1] == symbol
                    || gameMatrix[0][0] == symbol && gameMatrix[2][2] == symbol
                    || gameMatrix[1][1] == symbol && gameMatrix[2][2] == symbol)
            {
                if (gameMatrix[0][0] == Symbol.EMPTY) {
                    result[0] = 1;
                    result[1] = 0;
                    result[2] = 0;
                    return result;
                } else if (gameMatrix[1][1] == Symbol.EMPTY) {
                    result[0] = 1;
                    result[1] = 1;
                    result[2] = 1;
                    return result;
                } else if (gameMatrix[2][2] == Symbol.EMPTY){
                    result[0] = 1;
                    result[1] = 2;
                    result[2] = 2;
                    return result;
                }
            }
            else if (    gameMatrix[0][2] == symbol && gameMatrix[1][1] == symbol
                    || gameMatrix[0][2] == symbol && gameMatrix[2][0] == symbol
                    || gameMatrix[1][1] == symbol && gameMatrix[2][0] == symbol)
            {
                if (gameMatrix[0][2] == Symbol.EMPTY) {
                    result[0] = 1;
                    result[1] = 0;
                    result[2] = 2;
                    return result;
                } else if (gameMatrix[1][1] == Symbol.EMPTY) {
                    result[0] = 1;
                    result[1] = 1;
                    result[2] = 1;
                    return result;
                } else if (gameMatrix[2][0] == Symbol.EMPTY) {
                    result[0] = 1;
                    result[1] = 2;
                    result[2] = 0;
                    return result;
                }
            }
            result[0] = 0; // there is no 2 symbols in a row/column/diagonal or possible move is blocked by opponent
            return result;
        }


        public void printMatrix() {
            for (int i = 0; i < gameMatrix.length; i++) {
                if (i == 0) {
                    System.out.println("---------");
                }
                for (int j = 0; j < gameMatrix.length; j++) {
                    if (j == 0) {
                        System.out.print("| ");
                    }
                    System.out.print(gameMatrix[i][j].getSymbol() + " ");
                    if (j == gameMatrix.length - 1) {
                        System.out.print("|");
                    }
                }
                System.out.println();
                if (i == gameMatrix.length - 1) {
                    System.out.println("---------");
                }
            }
        }

        // ----------------------- OLD STUFF -----------------------
        // Used in stage 1/5 - 2/5
        /*
        public void fillInitMatrix (String userGameLayoutInput) {
            // userGameLayoutInput --> gameMatrix. String input used to fill two-dimensional array. Task 1/5.
            int charCounter = 0;
            for (int i = 0; i < gameMatrix.length; i++) {
                for (int j = 0; j < gameMatrix.length; j++) {
                    if (userGameLayoutInput.charAt(charCounter) == '_') {
                        gameMatrix[i][j] = Symbol.EMPTY;
                    } else if (userGameLayoutInput.charAt(charCounter) == 'X') {
                        gameMatrix[i][j] = Symbol.X;
                    } else if (userGameLayoutInput.charAt(charCounter) == 'O') {
                        gameMatrix[i][j] = Symbol.O;
                    }
                    charCounter++;
                }
            }
        }

        private boolean checkXMoreThanO() {
            int xCounter = 0;
            int oCounter = 0;
            for (int i = 0; i < gameMatrix.length; i++) {
                for (int j = 0; j < gameMatrix.length; j++) {
                    if (gameMatrix[i][j] == Symbol.X) {
                        xCounter++;
                    } else if (gameMatrix[i][j] == Symbol.O) {
                        oCounter++;
                    }
                }
            }
            return xCounter > oCounter;
        }
         */
    }
  learner_created: true
- name: src/tictactoe/AIHard.java
  visible: true
  learner_created: true
- name: src/tictactoe/Point.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Tue, 22 Sep 2020 11:59:47 UTC
record: -1
